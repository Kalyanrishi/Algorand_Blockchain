{
  "version": 3,
  "sources": [
    "../../lottery/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAwCK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAVL;;;AAAA;AAUK;;;AAAA;;AAAL;;;AAGQ;AAAA;;AAAA;AACA;AAAsB;AAAtB;AACA;AAAuB;;AAAvB;;AAER;;;AAGe;;AAAA;;AAAwB;;AAAxB;AAAP;AACO;;AAAA;;AAAsB;AAAA;AAAA;AAAA;AAAtB;AAAP;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAIO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AAAA;AAEe;;AACf;AAAgB;AAEC;;AAEjB;AACa;;AAAA;;AAAA;AAA6C;;;;AAA7C;;;;;AADb;;;AAGU;;;AAHV;;AAQO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AACA;;;;AAEW;;;;;AAFX;;;AAIQ;;;AAJR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 1000"
    },
    "7": {
      "op": "bytecblock \"total_enteries\" \"creator_address\" \"entry_fee\""
    },
    "50": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "52": {
      "op": "bz main_after_if_else@10",
      "stack_out": []
    },
    "55": {
      "op": "pushbytess 0xa03b81d2 0x87ea49d7 0xbe0bdebf 0x33b3499e // method \"create_application(uint64)void\", method \"enter_lottery(pay)void\", method \"pick_winner()void\", method \"delete_application()void\"",
      "defined_out": [
        "Method(create_application(uint64)void)",
        "Method(delete_application()void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)"
      ],
      "stack_out": [
        "Method(create_application(uint64)void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)",
        "Method(delete_application()void)"
      ]
    },
    "77": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_application(uint64)void)",
        "Method(delete_application()void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(uint64)void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "80": {
      "op": "match main_create_application_route@3 main_enter_lottery_route@4 main_pick_winner_route@5 main_delete_application_route@6",
      "stack_out": []
    },
    "90": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "block": "main_delete_application_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "94": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "DeleteApplication"
      ]
    },
    "96": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "97": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "98": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "100": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "101": {
      "callsub": "smart_contracts.lottery.contract.Lottery.delete_application",
      "op": "callsub delete_application"
    },
    "104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "105": {
      "op": "return",
      "stack_out": []
    },
    "106": {
      "block": "main_pick_winner_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "108": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "113": {
      "callsub": "smart_contracts.lottery.contract.Lottery.pick_winner",
      "op": "callsub pick_winner"
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "block": "main_enter_lottery_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "120": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "121": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "122": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "125": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "127": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "1"
      ]
    },
    "128": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "129": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "130": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "132": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "133": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "134": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "135": {
      "callsub": "smart_contracts.lottery.contract.Lottery.enter_lottery",
      "op": "callsub enter_lottery",
      "stack_out": []
    },
    "138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "block": "main_create_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "142": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "147": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "148": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "151": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "152": {
      "callsub": "smart_contracts.lottery.contract.Lottery.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "155": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "156": {
      "op": "return",
      "stack_out": []
    },
    "157": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.create_application",
      "params": {
        "entry_fee#0": "uint64"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "160": {
      "op": "bytec_2 // \"entry_fee\"",
      "defined_out": [
        "\"entry_fee\""
      ],
      "stack_out": [
        "\"entry_fee\""
      ]
    },
    "161": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"entry_fee\"",
        "entry_fee#0 (copy)"
      ],
      "stack_out": [
        "\"entry_fee\"",
        "entry_fee#0 (copy)"
      ]
    },
    "163": {
      "op": "app_global_put",
      "stack_out": []
    },
    "164": {
      "op": "bytec_0 // \"total_enteries\"",
      "defined_out": [
        "\"total_enteries\""
      ],
      "stack_out": [
        "\"total_enteries\""
      ]
    },
    "165": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"total_enteries\"",
        "0"
      ],
      "stack_out": [
        "\"total_enteries\"",
        "0"
      ]
    },
    "166": {
      "op": "app_global_put",
      "stack_out": []
    },
    "167": {
      "op": "bytec_1 // \"creator_address\"",
      "defined_out": [
        "\"creator_address\""
      ],
      "stack_out": [
        "\"creator_address\""
      ]
    },
    "168": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"creator_address\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"creator_address\"",
        "materialized_values%0#0"
      ]
    },
    "170": {
      "op": "app_global_put",
      "stack_out": []
    },
    "171": {
      "retsub": true,
      "op": "retsub"
    },
    "172": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.enter_lottery",
      "params": {
        "payment_txn#0": "uint64"
      },
      "block": "enter_lottery",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "175": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_txn#0 (copy)"
      ],
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "177": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "182": {
      "op": "assert",
      "stack_out": []
    },
    "183": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "185": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "187": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "188": {
      "op": "bytec_2 // \"entry_fee\"",
      "defined_out": [
        "\"entry_fee\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"entry_fee\""
      ]
    },
    "189": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "190": {
      "error": "check self.entry_fee exists",
      "op": "assert // check self.entry_fee exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "191": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "192": {
      "op": "assert",
      "stack_out": []
    },
    "193": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "194": {
      "op": "bytec_0 // \"total_enteries\"",
      "defined_out": [
        "\"total_enteries\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_enteries\""
      ]
    },
    "195": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "196": {
      "error": "check self.total_enteries exists",
      "op": "assert // check self.total_enteries exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "197": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "198": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "199": {
      "op": "bytec_0 // \"total_enteries\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"total_enteries\""
      ]
    },
    "200": {
      "op": "swap",
      "stack_out": [
        "\"total_enteries\"",
        "materialized_values%0#0"
      ]
    },
    "201": {
      "op": "app_global_put",
      "stack_out": []
    },
    "202": {
      "retsub": true,
      "op": "retsub"
    },
    "203": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.pick_winner",
      "params": {},
      "block": "pick_winner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "205": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "206": {
      "op": "bytec_1 // \"creator_address\"",
      "defined_out": [
        "\"creator_address\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"creator_address\""
      ]
    },
    "207": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "208": {
      "error": "check self.creator_address exists",
      "op": "assert // check self.creator_address exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "209": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "210": {
      "op": "assert",
      "stack_out": []
    },
    "211": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "212": {
      "op": "bytec_0 // \"total_enteries\"",
      "defined_out": [
        "\"total_enteries\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_enteries\""
      ]
    },
    "213": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "214": {
      "error": "check self.total_enteries exists",
      "op": "assert // check self.total_enteries exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "215": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "216": {
      "op": "assert",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "217": {
      "op": "global Round",
      "defined_out": [
        "maybe_value%1#0",
        "round_number#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "round_number#0"
      ]
    },
    "219": {
      "op": "swap",
      "stack_out": [
        "round_number#0",
        "maybe_value%1#0"
      ]
    },
    "220": {
      "op": "%",
      "defined_out": [
        "random_number#0"
      ],
      "stack_out": [
        "random_number#0"
      ]
    },
    "221": {
      "op": "gtxns Sender",
      "defined_out": [
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0"
      ]
    },
    "223": {
      "op": "itxn_begin"
    },
    "224": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "tmp%3#0"
      ]
    },
    "226": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "228": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "winner_address#0",
        "value%0#0"
      ]
    },
    "229": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "value%0#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "value%0#0",
        "1000000"
      ]
    },
    "233": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "234": {
      "op": "itxn_field Amount"
    },
    "236": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "238": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "239": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "241": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "242": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "244": {
      "op": "itxn_submit"
    },
    "245": {
      "retsub": true,
      "op": "retsub"
    },
    "246": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "249": {
      "op": "bytec_1 // \"creator_address\"",
      "defined_out": [
        "\"creator_address\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"creator_address\""
      ]
    },
    "250": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "251": {
      "error": "check self.creator_address exists",
      "op": "assert // check self.creator_address exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "255": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "256": {
      "op": "assert",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "257": {
      "op": "itxn_begin"
    },
    "258": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "259": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "261": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "262": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "264": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "266": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "267": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "269": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "270": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "272": {
      "op": "itxn_submit"
    },
    "273": {
      "retsub": true,
      "op": "retsub"
    }
  }
}