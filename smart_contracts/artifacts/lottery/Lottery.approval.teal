#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 1000
    bytecblock "total_enteries" "creator_address" "entry_fee"
    // smart_contracts/lottery/contract.py:11-12
    // #from httpx import delete
    // class Lottery(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0xa03b81d2 0x87ea49d7 0xbe0bdebf 0x33b3499e // method "create_application(uint64)void", method "enter_lottery(pay)void", method "pick_winner()void", method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_enter_lottery_route@4 main_pick_winner_route@5 main_delete_application_route@6

main_after_if_else@10:
    // smart_contracts/lottery/contract.py:11-12
    // #from httpx import delete
    // class Lottery(ARC4Contract):
    intc_1 // 0
    return

main_delete_application_route@6:
    // smart_contracts/lottery/contract.py:52
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_0 // 1
    return

main_pick_winner_route@5:
    // smart_contracts/lottery/contract.py:36
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pick_winner
    intc_0 // 1
    return

main_enter_lottery_route@4:
    // smart_contracts/lottery/contract.py:29
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lottery/contract.py:11-12
    // #from httpx import delete
    // class Lottery(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/lottery/contract.py:29
    // @arc4.abimethod
    callsub enter_lottery
    intc_0 // 1
    return

main_create_application_route@3:
    // smart_contracts/lottery/contract.py:22
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/lottery/contract.py:11-12
    // #from httpx import delete
    // class Lottery(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/lottery/contract.py:22
    // @arc4.abimethod(create="require")
    callsub create_application
    intc_0 // 1
    return


// smart_contracts.lottery.contract.Lottery.create_application(entry_fee: uint64) -> void:
create_application:
    // smart_contracts/lottery/contract.py:22-23
    // @arc4.abimethod(create="require")
    // def create_application(self,entry_fee:UInt64)->None:
    proto 1 0
    // smart_contracts/lottery/contract.py:25
    // self.entry_fee = entry_fee
    bytec_2 // "entry_fee"
    frame_dig -1
    app_global_put
    // smart_contracts/lottery/contract.py:26
    // self.total_enteries = UInt64(0)
    bytec_0 // "total_enteries"
    intc_1 // 0
    app_global_put
    // smart_contracts/lottery/contract.py:27
    // self.creator_address = Global.creator_address
    bytec_1 // "creator_address"
    global CreatorAddress
    app_global_put
    retsub


// smart_contracts.lottery.contract.Lottery.enter_lottery(payment_txn: uint64) -> void:
enter_lottery:
    // smart_contracts/lottery/contract.py:29-30
    // @arc4.abimethod
    // def enter_lottery(self,payment_txn:gtxn.PaymentTransaction)->None:
    proto 1 0
    // smart_contracts/lottery/contract.py:32
    // assert payment_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/lottery/contract.py:33
    // assert payment_txn.amount == self.entry_fee
    frame_dig -1
    gtxns Amount
    intc_1 // 0
    bytec_2 // "entry_fee"
    app_global_get_ex
    assert // check self.entry_fee exists
    ==
    assert
    // smart_contracts/lottery/contract.py:34
    // self.total_enteries+=UInt64(1)
    intc_1 // 0
    bytec_0 // "total_enteries"
    app_global_get_ex
    assert // check self.total_enteries exists
    intc_0 // 1
    +
    bytec_0 // "total_enteries"
    swap
    app_global_put
    retsub


// smart_contracts.lottery.contract.Lottery.pick_winner() -> void:
pick_winner:
    // smart_contracts/lottery/contract.py:38
    // assert Txn.sender == self.creator_address
    txn Sender
    intc_1 // 0
    bytec_1 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    ==
    assert
    // smart_contracts/lottery/contract.py:39
    // assert self.total_enteries > UInt64(0)
    intc_1 // 0
    bytec_0 // "total_enteries"
    app_global_get_ex
    assert // check self.total_enteries exists
    dup
    assert
    // smart_contracts/lottery/contract.py:41
    // round_number = Global.round
    global Round
    // smart_contracts/lottery/contract.py:42
    // random_number = round_number % self.total_enteries
    swap
    %
    // smart_contracts/lottery/contract.py:44
    // winner_address = gtxn.Transaction(random_number).sender
    gtxns Sender
    // smart_contracts/lottery/contract.py:46-50
    // itxn.Payment(
    //     amount = Global.current_application_address.balance - UInt64(1_000_000),
    //     receiver = winner_address,
    //     fee = 1000
    // ).submit()
    itxn_begin
    // smart_contracts/lottery/contract.py:47
    // amount = Global.current_application_address.balance - UInt64(1_000_000),
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    pushint 1000000 // 1000000
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/lottery/contract.py:46
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/lottery/contract.py:49
    // fee = 1000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/lottery/contract.py:46-50
    // itxn.Payment(
    //     amount = Global.current_application_address.balance - UInt64(1_000_000),
    //     receiver = winner_address,
    //     fee = 1000
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.lottery.contract.Lottery.delete_application() -> void:
delete_application:
    // smart_contracts/lottery/contract.py:54
    // assert Txn.sender == self.creator_address
    txn Sender
    intc_1 // 0
    bytec_1 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    swap
    dig 1
    ==
    assert
    // smart_contracts/lottery/contract.py:55-60
    // itxn.Payment(
    //     receiver=self.creator_address,
    //     amount=0,
    //     close_remainder_to=self.creator_address,
    //     fee=1000
    // ).submit()
    itxn_begin
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/lottery/contract.py:57
    // amount=0,
    intc_1 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/lottery/contract.py:55
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/lottery/contract.py:59
    // fee=1000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/lottery/contract.py:55-60
    // itxn.Payment(
    //     receiver=self.creator_address,
    //     amount=0,
    //     close_remainder_to=self.creator_address,
    //     fee=1000
    // ).submit()
    itxn_submit
    retsub
